.. include:: ../../macros.rst


.. _software_documentation_build_process:

=============
Build Process
=============

|foxbms| uses the ``waf The meta build system``. See `waf.io <https://waf.io/>`_
for details on |waf|.

General
-------
The build process is described in the ``wscript`` files that can be found
nearly everywhere inside the |foxbms| repositories.

The |waf| toolchain is located in directory ``foxbms-setup\tools``, and is
named something like ``waf-{{X}}-{{X}}-{{X}}`` where ``{{X}}`` indicates some
version number. This is automatically unpacked in a directory named something
like ``waf-{{X}}-{{X}}-{{X}}-{{some-hash-value}}`` containing the waf library.
Additional build tools are located in ``foxbms-setup\tools\waftools`` for
``doxygen`` and ``sphinx``.

Normally a waf build is executed like this, as waf version for this example 
``1.9.13`` is used:

..  code-block::    console

    python waf-1.9.13 configure build

For different targets the command gets more and more complicated and therefore
the waf build commands are wrapped in a python script ``build.py``. This
documentation is a datiled description of how ``build.py`` uses the exact
commands.

Targets
-------
The build process build the following targets:

    -   primary mcu:
    
        -   targets:
        
            -   foxbms.elf
            -   features:

                -   foxbms.hex
                -   foxbms_flash.bin
                -   foxbms_flashheader.bin

        - post build:

            - size.log

    -   secondary mcu:
    
        -   targets:
        
            -   foxbms.elf
            -   features:

                -   foxbms.hex
                -   foxbms_flash.bin
                -   foxbms_flashheader.bin

        - post build:

            - size.log

    -   documentation:
    
        -   general documentation in ``rst``
        -   doxygen documentation inside the source files in the repositories
            ``mcu-common``, ``mcu-primary``, ``mcu-secondary``.

Build Process
-------------

This sections gives an overview how the build process is defined. All targets
are defined in the top ``wscript`` loacted at ``foxbms-setup\wscript``.

General Documentation
+++++++++++++++++++++
This build target uses the function :code:`def sphinx(bld)`. Since this 
definition ``sphinx`` is accepted as command to waf. 

This target is generated by running

..  code-block::    console

    python waf-1.9.13 configure sphinx

Primary
+++++++
This section describs the build step of the primary mcu binaries.

Binaries
^^^^^^^^
This build target uses the function :code:`def build(bld)`.

This target is generated by running

..  code-block::    console

    python waf-1.9.13 configure build --primary

``configure`` must always be run because of some build dependencies.

Doxygen Documentation
^^^^^^^^^^^^^^^^^^^^^
This build target uses the function :code:`def doxygen(bld)`.

This target is generated by running

..  code-block::    console

    python waf-1.9.13 configure build --primary --doxygen

``configure`` must always be run because of some build dependencies.

Before generation the doxygen documentation a build of the mcu binary is always
exectued, as it makes no sense to generate a source code documentation to a
binary that does not exist.

Secondary
+++++++++
This section describs the build step of the secondary mcu binaries.

Binaries
^^^^^^^^
This build target uses the function :code:`def build(bld)`.

This target is generated by running

..  code-block::    console

    python waf-1.9.13 configure build --primary

``configure`` must always be run because of some build dependencies.

Doxygen Documentation
^^^^^^^^^^^^^^^^^^^^^
This build target uses the function :code:`def doxygen(bld)`.

This target is generated by running

..  code-block::    console

    python waf-1.9.13 configure build --secondary --doxygen

``configure`` must always be run because of some build dependencies.

Before generation the doxygen documentation a build of the mcu binary is always
exectued, as it makes no sense to generate a source code documentation to a
binary that does not exist.


wscripts
--------

As mentioned above, the build process is described in ``wscripts``, which are
itself valid python scripts.
The top |wscript| in ``foxbms-setup`` defines the functions needed for the 
build, e.g., :code:`configure`, :code:`build` etc.

In :code:`build`, dependent on the specified option (``-p`` or``-s``) different
projects are build by specifing a different directory to build recursivly. The
example below is a demonstrator how this works:

..  code-block::    python

        def build(bld):
            if p:
                bld.recurse(p)
            elif s:
                bld.recurse()
            else:
                0 # error

.. |waf|                        replace:: ``waf``
.. |wscript|                   replace:: ``wscript``
